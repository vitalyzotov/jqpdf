import org.gradle.internal.jvm.Jvm
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'cpp-library'
    id 'maven-publish'
}

group = 'ru.vzotov'
version = '11.4.0'

def os = OperatingSystem.current()

def jvmHome = Jvm.current().javaHome

tasks.withType(CppCompile).configureEach {
    macros.put("POINTERHOLDER_TRANSITION", "4")

    compilerArgs.addAll toolChain.map { toolChain ->
        if (toolChain in VisualCpp) {
            return ['/std:c++17']
        }
        return []
    }
}

library {
    linkage = [Linkage.STATIC, Linkage.SHARED]

    binaries.configureEach {
        def compileTask = compileTask.get()

        if (targetMachine.operatingSystemFamily.windows) {
            compileTask.compilerArgs.addAll "-I${jvmHome}/include"
            compileTask.compilerArgs.addAll "-I${jvmHome}/include/win32"
        } else if (targetMachine.operatingSystemFamily.linux) {
            compileTask.compilerArgs.addAll '-I', "${jvmHome}/include"
            compileTask.compilerArgs.addAll '-I', "${jvmHome}/include/linux"
            compileTask.compilerArgs.addAll '-D_FILE_OFFSET_BITS=64'
        } else if (targetMachine.operatingSystemFamily.macOs) {
            compileTask.compilerArgs.addAll '-I', "${jvmHome}/include"
            compileTask.compilerArgs.addAll '-I', "${jvmHome}/include/darwin"
            compileTask.compilerArgs.addAll '-mmacosx-version-min=10.4'
        }
        //compileTask.dependsOn(downloadAndUnzipQPDF)
    }
}

dependencies {
    implementation project(':qpdf')
}

publishing {
    repositories {
        maven {
            url "../repo"
        }
    }
}
