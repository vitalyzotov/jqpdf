buildscript {
    def os = org.gradle.internal.os.OperatingSystem.current()
    def nativeRuntimeUsage = Attribute.of("org.gradle.usage", Usage)
    def nativeOptimized = Attribute.of("org.gradle.native.optimized", Boolean)

    configurations.create('natives', {
        attributes {
            attribute(nativeRuntimeUsage, project.objects.named(Usage, 'native-runtime'))
            attribute(nativeOptimized, true)
        }
    })

    repositories {
        maven {
            url "../repo"
        }
    }
    dependencies {
        natives("ru.vzotov:jqpdflib_release_shared_${os.familyName}:11.4.0.${os.familyName}") {
            transitive os.windows
        }
    }
}

plugins {
    id 'java'
}

group 'ru.vzotov'
version '1.0-SNAPSHOT'

sourceSets {
    examples {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        java {
            srcDirs('src/examples/java')
        }
    }
}

configurations {
    examplesImplementation.extendsFrom(implementation)
    examplesRuntimeOnly.extendsFrom(runtimeOnly)
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.0'

    examplesImplementation 'com.google.zxing:core:3.4.1'
    examplesImplementation 'com.google.zxing:javase:3.4.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.register('readQrCodeFromPdf', JavaExec) {
    group = "Execution"
    description = "Run MainPdf example"
    classpath = sourceSets.examples.runtimeClasspath
    mainClass = 'ru.vzotov.jqpdf.MainPdf'
    workingDir = layout.buildDirectory.dir('natives').get().asFile
    jvmArgs = ["-Djava.library.path=" + workingDir.absolutePath]

    /*
    Copy shared libraries into working directory
    */
    buildscript.configurations.natives.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        copy {
            from artifact.file
            into workingDir
            rename { filename ->
                return artifact.file.name
            }
        }
    }

}
